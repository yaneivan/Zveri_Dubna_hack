import os
import base64
import requests
import json
import pandas as pd
from geopy.distance import geodesic
from mistralai import Mistral
import telebot
import logging
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# API –∫–ª—é—á –¥–ª—è Vision LLM
api_key = "BsoGgWX10TneaJMu89JevSiGCjU3ODnG"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64
def encode_image(image_path):
    logger.info(f"–ù–∞—á–∞–ª–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_path}")
    try:
        with open(image_path, "rb") as image_file:
            encoded = base64.b64encode(image_file.read()).decode('utf-8')
            logger.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ")
            return encoded
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        logger.error(traceback.format_exc())
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        logger.error(traceback.format_exc())
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è JSON –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
def create_json_prompt_for_text_analysis(text):
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ JSON –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞")
    try:
        prompt = {
            "text": text,
            "entities": [
                {"entity": "address", "types": ["address"]},
                {"entity": "animal type", "types": ["animal type"]},
                {"entity": "status", "types": ["status"]},
                {"entity": "description", "types": ["description"]}
            ]
        }
        return json.dumps(prompt)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ JSON –ø—Ä–æ–º–ø—Ç–∞: {e}")
        logger.error(traceback.format_exc())
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Vision LLM
def get_vision_llm_response(text):
    logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Vision LLM")
    try:
        model = "pixtral-12b-2409"
        client = Mistral(api_key=api_key)

        messages = [
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": f"""
**Objective:**
Analyze the given text and extract the address, animal type, status, and description.

**Format Requirements:**
- Do not explain your answer. Just output the JSON.

**Entity Annotation Details:**
- The entity "animal type" must be either "–ö–æ—à–∫–∞" or "–°–æ–±–∞–∫–∞".
- The entity "status" must be either "–ù–∞–π–¥–µ–Ω–∞" or "–ü—Ä–æ–ø–∞–ª–∞".
- Entity "address" –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —Ç–∞–∫, —á—Ç–æ–±—ã –≤ –∏—Ç–æ–≥–¥–µ –ø–æ–ª—É—á–∏–ª—Å—è –∑–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞ –¥–ª—è –≥—É–≥–ª –∫–∞—Ä—Ç. (–Ω–∞–ø—Ä–∏–º–µ—Ä –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å —Å–∫–ª–æ–Ω–µ–Ω–∏—è)

**Example:**

text = "–ü—Ä–æ–ø–∞–ª–∞ —Å–æ–±–∞–∫–∞, —É–ª–∏—Ü–∞ –õ–µ–Ω–∏–Ω–∞, –¥–æ–º 5, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥. –û—á–µ–Ω—å –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è —Å–æ–±–∞–∫–∞, —á–µ—Ä–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞, –ø—Ä–æ–ø–∞–ª–∞ –≤–æ –¥–≤–æ—Ä–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã–±–µ–∂–∞–ª–∞ –Ω–∞ —É–ª–∏—Ü—É."

{{
    "–ê–¥—Ä–µ—Å": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, —É–ª–∏—Ü–∞ –õ–µ–Ω–∏–Ω–∞, –¥–æ–º 5",
    "–¢–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ": "–°–æ–±–∞–∫–∞",
    "–°—Ç–∞—Ç—É—Å": "–ü—Ä–æ–ø–∞–ª–∞",
    "–û–ø–∏—Å–∞–Ω–∏–µ": "–û—á–µ–Ω—å –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è —Å–æ–±–∞–∫–∞, —á–µ—Ä–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞, –ø—Ä–æ–ø–∞–ª–∞ –≤–æ –¥–≤–æ—Ä–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã–±–µ–∂–∞–ª–∞ –Ω–∞ —É–ª–∏—Ü—É."
}}

Text:
"{text}"
"""
                    }
                ]
            }
        ]

        chat_response = client.chat.complete(
            model=model,
            messages=messages
        )
        logger.info("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Vision LLM")
        return chat_response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å Vision LLM: {e}")
        logger.error(traceback.format_exc())
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Nominatim API
def geocode_address(address):
    logger.info(f"–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞: {address}")
    url = "https://nominatim.openstreetmap.org/search"
    params = {
        'q': address,
        'format': 'json',
        'limit': 1
    }
    headers = {
        'User-Agent': 'PetFinderApp/1.0 (anton.epub@gmail.com)'
    }
    try:
        response = requests.get(url, params=params, headers=headers)
        response.raise_for_status()
        data = response.json()

        if (data):
            location = data[0]
            latitude = float(location['lat'])
            longitude = float(location['lon'])
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude}, {longitude}")
            return latitude, longitude
        else:
            logger.warning("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
    except requests.exceptions.HTTPError as e:
        logger.error(f"–û—à–∏–±–∫–∞ HTTP: {e}")
        logger.error(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
        logger.error(traceback.format_exc())
        return None
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        logger.error(traceback.format_exc())
        return None
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        logger.error(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
        logger.error(traceback.format_exc())
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
def compare_animal(record, target_description, user_images=None):
    logger.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º: {target_description}")
    try:
        messages = [
            {
                "role": "user",
                "content": []
            }
        ]

        messages[0]['content'].append({
            "type": "text",
            "text": f"–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ, —ç—Ç–æ –∏—Å–∫–æ–º–æ–µ –∏–ª–∏ –¥—Ä—É–≥–æ–µ. –û–ø–∏—Å–∞–Ω–∏–µ –∏—Å–∫–æ–º–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ: {target_description}"
        })

        messages[0]['content'].append({
            "type": "text",
            "text": f"–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∂–∏–≤—Ç–Ω–æ–≥–æ: {record['description']}"
        })

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if user_images:
            for img_path in user_images:
                base64_image = encode_image(img_path)
                if base64_image:
                    messages[0]['content'].append({
                        "type": "image_url",
                        "image_url": f"data:image/jpeg;base64,{base64_image}"
                    })

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        for img in record['imgs']:
            messages[0]['content'].append({
                "type": "image_url",
                "image_url": img
            })

        messages[0]['content'].append({
            "type": "text",
            "text": f'–ü–æ—Å–ª–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –û—Ç–≤–µ—Ç: {{"result": "–ø–æ—Ö–æ–∂–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" –∏–ª–∏ "–¥—Ä—É–≥–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ"}}'
        })

        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM")
        chat_response = client.chat.complete(
            model=model,
            messages=messages
        )
        logger.info("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç LLM")
        return chat_response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö: {e}")
        logger.error(traceback.format_exc())
        return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('1886756451:AAGvgfHgeuMu07oiKlTZoPtgDHeqb-lhlrk')

# Retrieve the API key from environment variables
api_key = "BsoGgWX10TneaJMu89JevSiGCjU3ODnG"

# Specify model
model = "pixtral-12b-2409"

# Initialize the Mistral client
client = Mistral(api_key=api_key)

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
    üêæ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:
    
    1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ –∏–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
    2. –£–∫–∞–∂–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:
       - –¢–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–∫–æ—à–∫–∞/—Å–æ–±–∞–∫–∞)
       - –°—Ç–∞—Ç—É—Å (–Ω–∞–π–¥–µ–Ω–∞/–ø—Ä–æ–ø–∞–ª–∞)
       - –ê–¥—Ä–µ—Å
       - –û–ø–∏—Å–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
    3. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–¥–æ 10 —à—Ç—É–∫)
    
    –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:
    "–ü—Ä–æ–ø–∞–ª–∞ —Å–æ–±–∞–∫–∞ –≤ —Ä–∞–π–æ–Ω–µ —É–ª. –õ–µ–Ω–∏–Ω–∞, 5. –ß–µ—Ä–Ω–∞—è, —Å –±–µ–ª—ã–º –ø—è—Ç–Ω–æ–º –Ω–∞ –≥—Ä—É–¥–∏, –æ—Ç–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–ª–∏—á–∫—É –†–µ–∫—Å"
    
    /start - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
    """
    bot.reply_to(message, help_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    bot.reply_to(message, '–ü—Ä–∏–≤–µ—Ç! üêæ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ –∏–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å). –î–ª—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@bot.message_handler(content_types=['photo'])
def handle_photos(message):
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists('tg_input_imgs'):
        os.makedirs('tg_input_imgs')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
    file_info = bot.get_file(message.photo[-1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    image_path = f'tg_input_imgs/{user_id}_{file_info.file_path.split("/")[-1]}'
    with open(image_path, 'wb') as new_file:
        new_file.write(downloaded_file)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {'images': [], 'description': None}
    
    user_data[user_id]['images'].append(image_path)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    if user_data[user_id]['description']:
        handle_search_request(message, user_data[user_id]['description'], user_data[user_id]['images'])
    else:
        bot.reply_to(message, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message.text}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    if user_id not in user_data:
        user_data[user_id] = {'images': [], 'description': None}
    
    user_data[user_id]['description'] = message.text
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    if user_data[user_id]['images']:
        handle_search_request(message, message.text, user_data[user_id]['images'])
    else:
        handle_search_request(message, message.text)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    user_data[user_id] = {'images': [], 'description': None}

def handle_search_request(message, text, user_images=None):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        llm_response = get_vision_llm_response(text)
        logger.info(f"–û—Ç–≤–µ—Ç LLM: {llm_response}")

        try:
            llm_response = llm_response.replace("```json", "").replace("```", "")
            llm_data = json.loads(llm_response)
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
            logger.error(traceback.format_exc())
            llm_data = {}

        address = llm_data.get('–ê–¥—Ä–µ—Å')
        animal_type = llm_data.get('–¢–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ') if llm_data.get('–¢–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ') in ['–ö–æ—à–∫–∞', '–°–æ–±–∞–∫–∞'] else None
        status = llm_data.get('–°—Ç–∞—Ç—É—Å') if llm_data.get('–°—Ç–∞—Ç—É—Å') in ['–ù–∞–π–¥–µ–Ω–∞', '–ü—Ä–æ–ø–∞–ª–∞'] else None
        description = llm_data.get('–û–ø–∏—Å–∞–Ω–∏–µ')

        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –ê–¥—Ä–µ—Å={address}, –¢–∏–ø={animal_type}, –°—Ç–∞—Ç—É—Å={status}")

        try:
            links_df = pd.read_csv('links.csv')
            links_df['imgs'] = links_df['imgs'].apply(eval).tolist()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV: {e}")
            logger.error(traceback.format_exc())
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö üòø")
            return

        if animal_type and status:
            filtered_data = pd.DataFrame()
            if animal_type == '–ö–æ—à–∫–∞':
                if status == '–ü—Ä–æ–ø–∞–ª–∞':
                    filtered_data = links_df[(links_df['status'] == '–ù–∞–π–¥–µ–Ω–∞') & (links_df['animal_type'] == '–ö–æ—à–∫–∞')]
                elif status == '–ù–∞–π–¥–µ–Ω–∞':
                    filtered_data = links_df[(links_df['status'] == '–ü—Ä–æ–ø–∞–ª–∞') & (links_df['animal_type'] == '–ö–æ—à–∫–∞')]
            elif animal_type == '–°–æ–±–∞–∫–∞':
                if status == '–ü—Ä–æ–ø–∞–ª–∞':
                    filtered_data = links_df[(links_df['status'] == '–ù–∞–π–¥–µ–Ω–∞') & (links_df['animal_type'] == '–°–æ–±–∞–∫–∞')]
                elif status == '–ù–∞–π–¥–µ–Ω–∞':
                    filtered_data = links_df[(links_df['status'] == '–ü—Ä–æ–ø–∞–ª–∞') & (links_df['animal_type'] == '–°–æ–±–∞–∫–∞')]
            if address:
                coordinates = geocode_address(address)
                if coordinates:
                    latitude, longitude = coordinates
                    logger.info(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude}, {longitude}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
                    if pd.isna(latitude) or pd.isna(longitude):
                        logger.warning("–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
                        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ üòø")
                        return

                    # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                    filtered_data = filtered_data.dropna(subset=['latitude', 'longitude'])

                    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–∏—Å–µ–π —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                    filtered_data['distance'] = filtered_data.apply(
                        lambda row: geodesic((latitude, longitude), (row['latitude'], row['longitude'])).kilometers 
                        if not pd.isna(row['latitude']) and not pd.isna(row['longitude'])
                        else float('inf'),
                        axis=1
                    )
                    sorted_data = filtered_data.sort_values(by='distance')

                    for index, record in sorted_data.head(7).iterrows():
                        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ {index + 1}: {record['title']}")
                        result = compare_animal(record, description, user_images)
                        
                        if result:
                            json_string = result.split("–û—Ç–≤–µ—Ç:")[-1].strip()
                            try:
                                json_result = json.loads(json_string)
                                if json_result['result'] == "–ø–æ—Ö–æ–∂–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ":
                                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {record['link']}")
                                    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤ –ø–µ—Ä–≤–æ–º —Ñ–æ—Ç–æ
                                    media_group = []
                                    first_photo = True
                                    for img_url in record['imgs']:
                                        try:
                                            img_response = requests.get(img_url)
                                            img_dir = 'tg_imgs'
                                            if not os.path.exists(img_dir):
                                                os.makedirs(img_dir)
                                            img_path = os.path.join(img_dir, f"{record['link'].split('/')[-1]}_{len(media_group)}.jpg")
                                            with open(img_path, 'wb') as img_file:
                                                img_file.write(img_response.content)
                                            
                                            if first_photo:
                                                # –ö –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                                                caption = f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {json_result['result']} üêæ\n–û–ø–∏—Å–∞–Ω–∏–µ: {record['description']}\n–°—Å—ã–ª–∫–∞: {record['link']}\n"
                                                media_group.append(telebot.types.InputMediaPhoto(open(img_path, 'rb'), caption=caption))
                                                first_photo = False
                                            else:
                                                media_group.append(telebot.types.InputMediaPhoto(open(img_path, 'rb')))
                                        except Exception as e:
                                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                                            logger.error(traceback.format_exc())
                                            continue
                                    
                                    if media_group:
                                        bot.send_media_group(message.chat.id, media_group)
                                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º")
                                else:
                                    logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ—Ö–æ–∂–µ: {record['link']}")
                                    if index == len(sorted_data.head(7)) - 1:
                                        bot.reply_to(message, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π üòøüêæüíî\n–ù–æ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º –∏—Å–∫–∞—Ç—å! üîç‚ú®\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ üåü")
                            except json.JSONDecodeError as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
                                logger.error(traceback.format_exc())

                else:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
                    bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ üòø")
            else:
                logger.warning("–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
                bot.reply_to(message, "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è üòø")
        else:
            logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å")
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–∫–æ—à–∫–∞/—Å–æ–±–∞–∫–∞) –∏ —Å—Ç–∞—Ç—É—Å (–Ω–∞–π–¥–µ–Ω–∞/–ø—Ä–æ–ø–∞–ª–∞) üêæ")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        logger.error(traceback.format_exc())
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üòø")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    try:
        bot.polling()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        logger.critical(traceback.format_exc())
